{"is_source_file": true, "format": "Python", "description": "This Python script provides utility functions for data cleaning and issue detection on pandas DataFrames, including handling missing data, duplicates, data type inference, outlier detection using IQR, and generating a markdown report.", "external_files": ["numpy", "pandas", "sklearn.preprocessing"], "external_methods": ["np.number", "pd.to_numeric", "pd.to_datetime", "pd.Series.str.strip", "pd.Series.str.lower", "pd.Series.str.replace", "pd.Series.notna", "pd.DataFrame", "pd.Series.mode", "pd.Series.clip"], "published": ["detect_issues", "apply_cleaning_pipeline", "generate_summary_report_markdown"], "classes": [], "methods": [{"name": "_standardize_column_names(columns)", "description": "Standardizes column names by converting to string, stripping whitespace, lowering case, and replacing spaces with underscores.", "scope": "", "scopeKind": ""}, {"name": "pd.Series _coerce_numeric(series: pd.Series)", "description": "Attempts to coerce a pandas Series to numeric type, coercing errors to NaN.", "scope": "", "scopeKind": ""}, {"name": "pd.Series _coerce_datetime(series: pd.Series)", "description": "Attempts to parse a pandas Series to datetime, coercing errors to NaN.", "scope": "", "scopeKind": ""}, {"name": "Tuple[float,float] _iqr_bounds(s: pd.Series)", "description": "Calculates the lower and upper bounds using the interquartile range (IQR) method for outlier detection.", "scope": "", "scopeKind": ""}, {"name": "Dict[str,Any] detect_issues(df: pd.DataFrame)", "description": "Detects data issues such as missing values, duplicates, data type problems, and outliers in a DataFrame.", "scope": "", "scopeKind": ""}, {"name": "Tuple[pd.DataFrame,Dict[str,Any]] apply_cleaning_pipeline( df: pd.DataFrame, remove_duplicates: bool, fill_missing_strategy: str = \"mean\", constant_value: Optional[str] = None, standardize_columns: bool = True, convert_types: bool = True, outlier_action: str = \"cap\", )", "description": "Performs cleaning operations such as standardizing column names, removing duplicates, converting data types, filling missing values, and handling outliers.", "scope": "", "scopeKind": ""}, {"name": "str generate_summary_report_markdown( original_df: pd.DataFrame, cleaned_df: pd.DataFrame, issues: Dict[str, Any], cleaning_details: Dict[str, Any], file_meta: Dict[str, Any], )", "description": "Produces a markdown-formatted summary report of dataset issues and cleaning steps.", "scope": "", "scopeKind": ""}], "calls": ["pd.to_numeric", "pd.to_datetime", "df.isna", "df.duplicated", "Series.quantile", "Series.astype", "Series.str.strip", "Series.str.lower", "Series.str.replace", "Series.notna", "Series.mode", "Series.clip"], "search-terms": ["data_cleaning", "issue_detection", "outlier_detection", "type_inference", "missing_value_handling", "duplicate_removal", "column_name_standardization", "cleaning_pipeline", "issue_report"], "state": 2, "file_id": 16, "knowledge_revision": 33, "git_revision": "", "ctags": [{"_type": "tag", "name": "_coerce_datetime", "path": "/home/kavia/workspace/code-generation/universal-application-framework-91-105/data_cleaning_tool/utils/cleaning.py", "pattern": "/^def _coerce_datetime(series: pd.Series) -> pd.Series:$/", "language": "Python", "typeref": "typename:pd.Series", "kind": "function", "signature": "(series: pd.Series)"}, {"_type": "tag", "name": "_coerce_numeric", "path": "/home/kavia/workspace/code-generation/universal-application-framework-91-105/data_cleaning_tool/utils/cleaning.py", "pattern": "/^def _coerce_numeric(series: pd.Series) -> pd.Series:$/", "language": "Python", "typeref": "typename:pd.Series", "kind": "function", "signature": "(series: pd.Series)"}, {"_type": "tag", "name": "_iqr_bounds", "path": "/home/kavia/workspace/code-generation/universal-application-framework-91-105/data_cleaning_tool/utils/cleaning.py", "pattern": "/^def _iqr_bounds(s: pd.Series) -> Tuple[float, float]:$/", "language": "Python", "typeref": "typename:Tuple[float,float]", "kind": "function", "signature": "(s: pd.Series)"}, {"_type": "tag", "name": "_standardize_column_names", "path": "/home/kavia/workspace/code-generation/universal-application-framework-91-105/data_cleaning_tool/utils/cleaning.py", "pattern": "/^def _standardize_column_names(columns):$/", "language": "Python", "kind": "function", "signature": "(columns)"}, {"_type": "tag", "name": "apply_cleaning_pipeline", "path": "/home/kavia/workspace/code-generation/universal-application-framework-91-105/data_cleaning_tool/utils/cleaning.py", "pattern": "/^def apply_cleaning_pipeline($/", "language": "Python", "typeref": "typename:Tuple[pd.DataFrame,Dict[str,Any]]", "kind": "function", "signature": "( df: pd.DataFrame, remove_duplicates: bool, fill_missing_strategy: str = \"mean\", constant_value: Optional[str] = None, standardize_columns: bool = True, convert_types: bool = True, outlier_action: str = \"cap\", )"}, {"_type": "tag", "name": "detect_issues", "path": "/home/kavia/workspace/code-generation/universal-application-framework-91-105/data_cleaning_tool/utils/cleaning.py", "pattern": "/^def detect_issues(df: pd.DataFrame) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "(df: pd.DataFrame)"}, {"_type": "tag", "name": "generate_summary_report_markdown", "path": "/home/kavia/workspace/code-generation/universal-application-framework-91-105/data_cleaning_tool/utils/cleaning.py", "pattern": "/^def generate_summary_report_markdown($/", "language": "Python", "typeref": "typename:str", "kind": "function", "signature": "( original_df: pd.DataFrame, cleaned_df: pd.DataFrame, issues: Dict[str, Any], cleaning_details: Dict[str, Any], file_meta: Dict[str, Any], )"}, {"_type": "tag", "name": "np", "path": "/home/kavia/workspace/code-generation/universal-application-framework-91-105/data_cleaning_tool/utils/cleaning.py", "pattern": "/^import numpy as np$/", "language": "Python", "kind": "namespace", "nameref": "module:numpy"}, {"_type": "tag", "name": "pd", "path": "/home/kavia/workspace/code-generation/universal-application-framework-91-105/data_cleaning_tool/utils/cleaning.py", "pattern": "/^import pandas as pd$/", "language": "Python", "kind": "namespace", "nameref": "module:pandas"}], "hash": "ece6d1b7711232c879d4f84fedb8a385", "format-version": 4, "code-base-name": "frontend_app", "filename": "data_cleaning_tool/utils/cleaning.py", "revision_history": [{"33": ""}]}